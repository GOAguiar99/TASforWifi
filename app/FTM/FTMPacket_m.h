//
// Generated file, do not edit! Created by opp_msgtool 6.1 from inet/applications/FTM/FTMPacket.msg.
//

#ifndef __INET_FTMPACKET_M_H
#define __INET_FTMPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class FTMApplicationPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/clock/contract/ClockTime_m.h" // import inet.clock.contract.ClockTime


namespace inet {

/**
 * Class generated from <tt>inet/applications/FTM/FTMPacket.msg:27</tt> by opp_msgtool.
 * <pre>
 * // Define a custom ApplicationPacket with clockTime
 * class FTMApplicationPacket extends FieldsChunk
 * {
 *     uint32_t sequenceNumber; // Número de sequência do pacote
 *     clocktime_t clockTime1;   // Clocktime inicial enviado pelo host
 *     clocktime_t clockTime2;   // Clocktime recebido na segunda mensagem
 *     clocktime_t clockTime3;   // Clocktime recebido na terceira mensagem
 * }
 * </pre>
 */
class INET_API FTMApplicationPacket : public ::inet::FieldsChunk
{
  protected:
    uint32_t sequenceNumber = 0;
    clocktime_t clockTime1 = CLOCKTIME_ZERO;
    clocktime_t clockTime2 = CLOCKTIME_ZERO;
    clocktime_t clockTime3 = CLOCKTIME_ZERO;

  private:
    void copy(const FTMApplicationPacket& other);

  protected:
    bool operator==(const FTMApplicationPacket&) = delete;

  public:
    FTMApplicationPacket();
    FTMApplicationPacket(const FTMApplicationPacket& other);
    virtual ~FTMApplicationPacket();
    FTMApplicationPacket& operator=(const FTMApplicationPacket& other);
    virtual FTMApplicationPacket *dup() const override {return new FTMApplicationPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint32_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint32_t sequenceNumber);

    virtual clocktime_t getClockTime1() const;
    virtual void setClockTime1(clocktime_t clockTime1);

    virtual clocktime_t getClockTime2() const;
    virtual void setClockTime2(clocktime_t clockTime2);

    virtual clocktime_t getClockTime3() const;
    virtual void setClockTime3(clocktime_t clockTime3);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FTMApplicationPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FTMApplicationPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::FTMApplicationPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::FTMApplicationPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_FTMPACKET_M_H

